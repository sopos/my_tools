#!/bin/bash
dupes=0
_Log(){
  local prio="${2:-LOG}"
  local left=$(( (10+${#prio})/2 ))

  printf ":: [ %(%F %T)T ] :: [%*s%*s] :: " -1 "$left" "${prio^^}" "$(( 10-$left ))" >&2
  echo -e "$1" >&2
}

Log(){
  if [[ "$1" =~ Non-monoton|Skipping\ NAL|Last\ message\ repeated ]]; then
    let dupes++
    [[ $dupes -eq 2 ]] && _Log "suppressing simillar messages..." info
    [[ $dupes -gt 1 ]] && return
  else
    [[ $dupes -gt 2 ]] && {
      _Log "suppressed $((dupes-1)) simillar messages" info
    }
    dupes=0
  fi
  _Log "$@"
}

LogDebug(){
  [[ -n "$DEBUG" ]] && Log "$1" "${2:-DEBUG}"
}

#echo "`ps auxf | grep -C3 -E 'bash[^|]*autoenc'`"
#echo "`ps aux | grep -E 'bash[^|]*autoenc' | wc -l`"

# check if the encoding is in progress
[[ `ps aux | grep -E 'bash[^|]*autoenc' | wc -l` -gt 2 ]] && {
  LogDebug "autoenc is still doing its job"
  exit
}

( which HandBrakeCLI && which ffmpeg && which ps && which pidof && which mediainfo && which bc && which nice && which find && which grep ) > /dev/null 2>&1 || {
  Log "following tools need to be installed: HandBrakeCLI. ffmpeg, git, ps, pidof, mediainfo, bc, nice, find, and grep"
  Log " try \`dnf install \\*/bin/HandBrakeCLI \\*/bin/ffmpeg \\*/bin/git \\*/bin/ps \\*/bin/pidof \\*/bin/mediainfo \\*/bin/bc \\*/bin/nice \\*/bin/find \\*/bin/grep\`"
  exit
}

[[ "$1" != "reload" ]] && {
  LogDebug "updating the script"
  git_out="$(git -C $(dirname `readlink -e $0`) pull)" || echo "$git_out"
  exec $0 reload "$@"
}
shift

Run() {
  LogDebug "running '$1'"
  eval "$1"
}

RUN() {
  local param params blacklist="[[:space:]]|>|<|\|\"'"
  for param in "$@"; do
    if [[ "$param" =~ $blacklist ]]; then
      param="${param//\\/\\\\}"
      params="$params \"${param//\"/\\\"}\""
    else
      params="$params $param"
    fi
  done
  params="${params:1}"
  Log "EXECUTING >>>>> ionice -c 3 nice -n 15 ${params} <<<<<"
  eval "ionice -c 3 nice -n 15 $params" 2>&1
  local res=$?
  LogDebug "FINISHED WITH RESULT $res"
  return $res
}
RUN2() {
  Log "EXECUTING >>>>> ionice -c 3 nice -n 15 ${1} <<<<<"
  eval "ionice -c 3 nice -n 15 $1" 2>&1
  local res=$?
  LogDebug "FINISHED WITH RESULT $res"
  return $res
}

filename() {
  echo "$1" | sed -r "s/(.*)\.([^.]*)$/\1/"
}

fileext() {
  echo "$1" | sed -r "s/(.*)\.([^.]*)$/\2/"
}

basic_audio_codec=aac
x265_preset=slow
x264_preset=slow

enc_eee() {
  local file="$1" opts out="$2"
  opts='--keep-display-aspect'
  RUN HandBrakeCLI -f av_mkv \
                          -e mpeg4 -q 15.0 $opts -m --previews 1 -X 1024 -Y 576 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E $basic_audio_codec -B 160 --audio-fallback ac3 -6 stereo \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_eee() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=25
  opts='--keep-display-aspect'
  RUN2 "HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 -X 832 -Y 468 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E $basic_audio_codec -B 128 --mixdown stereo --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i \"$file\" \
                          -o \"$out\""
}

enc_eee2() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=23
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+="-map -$teletext"
  RUN2 "ffmpeg -fflags +igndts -stats -nostdin -hide_banner -y \
                           -i \"$file\" -map 0:v -map 0:a? -map 0:s? -vf \"scale=-4:'min(468,ih)'\" -sws_flags bilinear \
                           $opts \
                           -c:v libx264 -crf ${quality} -preset $x264_preset \
                           -c:a copy \
                           -c:s copy \
                           \"$out\""
}

enc_x264_864x486() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=21
  [[ $height -le 360 ]] && quality=20
  opts='--keep-display-aspect'
  RUN HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 -X 864 -Y 486 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E $basic_audio_codec -B 192 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_x264_832x468() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=21
  [[ $height -le 360 ]] && quality=20
  opts='--keep-display-aspect'
  RUN HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 -X 832 -Y 468 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E $basic_audio_codec -B 192 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_x264() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=25
  [[ $height -le 720 ]] && quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts='--keep-display-aspect'
  RUN HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 -X 1920 -Y 1080 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy -B 384 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_x264() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=25
  [[ $height -le 720 ]] && quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+="-map -$teletext"
  RUN2 "ffmpeg -fflags +igndts -stats -nostdin -hide_banner -y \
                           -i \"$file\" -map 0:v -map 0:a? -map 0:s? \
                           $opts \
                           -c:v libx264 -crf ${quality} -preset $x264_preset \
                           -c:a copy \
                           -c:s copy \
                           \"$out\""
}

enc_x264_1280x720() {
  local file="$1" opts out="$2" scale
  local width=$(mediainfo --Inform='Video;%Width%' "$file")
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
#  opts='--keep-display-aspect'
#  RUN HandBrakeCLI -f av_mkv \
#                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 -X 1280 -Y 720 \
#                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy -B 384 --audio-fallback ac3 \
#                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
#                          -i "$file" \
#                          -o "$out"
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+="-map -$teletext"
  scale="-vf \"scale=-4:'min(720,ih)'\""
  (( width * 100 / height > 177 )) && scale="-vf \"scale='min(1280,iw)':-4\""
  scale+=" -sws_flags bilinear"
  RUN2 "ffmpeg -fflags +igndts -stats -nostdin -hide_banner -y \
                           -i \"$file\" -map 0:v -map 0:a? -map 0:s? \
                           $scale \
                           $opts \
                           -c:v libx264 -crf ${quality} -preset $x264_preset \
                           -c:a $basic_audio_codec -b:a 160k \
                           -c:s copy \
                           \"$out\""
}

enc_x264_hd() {
  enc_x264_1280x720 "$@"
}

enc_htpc() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts='--keep-display-aspect'
  RUN HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset ultrafast --h264-profile main --previews 1 -X 1280 -Y 720 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E $basic_audio_codec -B 192 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_htpc_rpi() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts='--keep-display-aspect'
  nice -n 15 ffmpeg -fflags +igndts -stats -hide_banner -y \
                           -i "$file" -map 0:v -map 0:a? -map 0:s? -vf "scale=-4:'min(720,ih)'" -sws_flags bilinear \
                           -c:v h264_omx -b:v 1500k -maxrate:v 2000k \
                           -c:a $basic_audio_codec -b:a 192k \
                           "$out"
}

enc_htpc_2() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local fps=`echo "scale=20;$(mediainfo --Inform='Video;%FrameRate%' "$file") / 2" | bc | sed -r 's/0+$//;s/\.$//'`
  local quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts="--keep-display-aspect --rate $fps"
  RUN HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 -X 1280 -Y 720 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E $basic_audio_codec -B 192 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_VHS() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=25
  [[ $height -le 720 ]] && quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts="--keep-display-aspect --decomb=\"mode=17\" --cfr -r 50 --crop 12:12:24:24 -l $(( ($height-2*12)/2 )) --display-width $(( ($height-2*12)/2*4/3 ))"
  RUN HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy --audio-fallback $basic_audio_codec  -B 192\
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_x264_VHS() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=25
  [[ $height -le 720 ]] && quality=22
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts="--keep-display-aspect --decomb=\"mode=17\" --cfr -r 50 --crop 12:12:24:24 --display-width $(( ($height-2*12)*4/3 ))"
  RUN HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy --audio-fallback $basic_audio_codec  -B 192\
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_VHS() {
  enc_x264_VHS "$@"
}

enc_x265_VHS() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=26
  [[ $height -le 1080 ]] && quality=25
  [[ $height -le 720 ]] && quality=24
  [[ $height -le 486 ]] && quality=22
  [[ $height -le 360 ]] && quality=21
  opts="--keep-display-aspect --decomb=\"mode=17\" --cfr -r 50 --crop 12:12:24:24 --display-width $(( ($height-2*12)*4/3 ))"
  RUN HandBrakeCLI -f av_mkv \
                          -e x265 -q ${quality}.0 $opts -m --x265-preset $x265_preset --previews 1 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy --audio-fallback $basic_audio_codec  -B 192\
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_minidv() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=26
  [[ $height -le 1080 ]] && quality=25
  [[ $height -le 720 ]] && quality=22
  [[ $height -le 480 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts='--keep-display-aspect --decomb="mode=17" --cfr -r 50 --display-width $(( $height*4/3 ))'
#                          -a 1 -E $basic_audio_codec -B 192 \
  RUN HandBrakeCLI -f av_mkv \
                          -e x265 -q ${quality}.0 $opts -m --x265-preset $x265_preset --previews 1\
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy -B 192 --audio-fallback $basic_audio_codec \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}


enc_x265() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=26
  [[ $height -le 1080 ]] && quality=25
  [[ $height -le 720 ]] && quality=24
  [[ $height -le 486 ]] && quality=22
  [[ $height -le 360 ]] && quality=21
  opts='--keep-display-aspect'
  RUN HandBrakeCLI -f av_mkv \
                          -e x265 -q ${quality}.0 $opts -m --x265-preset $x265_preset --previews 1 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy -B 384 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

ffprobe_parse() {
  local tmp line file="$1"
  unset ffp
  declare -A -g ffp
  tmp=$(ffprobe -v error -select_streams v:0 -show_entries stream "$file")
  while read -r line; do
    [[ "$line" =~ ^(.*)=(.*)$ ]] && {
      ffp[${BASH_REMATCH[1]}]="${BASH_REMATCH[2]}"
    }
  done <<< "$tmp"
  [[ -n "$DEBUG" ]] && {
    for i in $(echo "${!ffp[@]}" | tr ' ' '\n' | sort); do LogDebug "$i = '${ffp[$i]}'"; done
  }
}

enc_x265() {
  local file="$1" opts out="$2" height pix_fmt
  #local height=$(mediainfo --Inform='Video;%Height%' "$file")
  ffprobe_parse "$file"
  height="${ffp[height]}"
  local quality=26
  [[ $height -le 1080 ]] && quality=25
  [[ $height -le 720 ]] && quality=24
  [[ $height -le 486 ]] && quality=22
  [[ $height -le 360 ]] && quality=21
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+=" -map -$teletext"
  #[[ "${ffp[pix_fmt]} =~ yuv420p10 ]] && opts+=" -vf zscale=t=linear:npl=100,format=gbrpf32le,zscale=p=bt709,tonemap=tonemap=hable:desat=0,zscale=t=bt709:m=bt709:r=tv,format=yuv420p"
  [[ "${ffp[color_space]}" = "bt2020nc" ]] && [[ "${ffp[color_transfer]}" = "smpte2084" ]] && [[ "${ffp[color_primaries]}" = "bt2020" ]] && \
    opts+=" -vf zscale=t=linear:npl=50,format=gbrpf32le,zscale=p=bt709,tonemap=tonemap=mobius:desat=2:peak=1.5,zscale=t=bt709:m=bt709:r=tv,format=yuv420p"
  RUN2 "ffmpeg -fflags +igndts -stats -nostdin -hide_banner -y \
                           -i \"$file\" -map 0:v -map 0:a? -map 0:s? \
                           $opts \
                           -c:v libx265 -crf ${quality} -preset $x265_preset \
                           -c:a copy \
                           -c:s copy \
                           \"$out\""
}

enc_x265_fhd() { # max 1920x1080p
  local file="$1" opts out="$2" scale
  local width=$(mediainfo --Inform='Video;%Width%' "$file")
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=25
  [[ $height -le 720 ]] && quality=24
  [[ $height -le 540 ]] && quality=22
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+="-map -$teletext"
  scale="-vf \"scale=-4:'min(1080,ih)'\""
  (( width * 100 / height > 177 )) && scale="-vf \"scale='min(1920,iw)':-4\""
  scale+=" -sws_flags bilinear"
  RUN2 "ffmpeg -fflags +igndts -stats -nostdin -hide_banner -y \
                           -i \"$file\" -map 0:v -map 0:a? -map 0:s? \
                           $scale \
                           $opts \
                           -c:v libx265 -crf ${quality} -preset $x265_preset \
                           -c:a copy \
                           -c:s copy \
                           \"$out\""
}

enc_fhd() {
  enc_x265_fhd "$@"
}

enc_hd2() { # max 1280x720p, max 25fps, stereo
  local file="$1" opts out="$2" scale
  local width=$(mediainfo --Inform='Video;%Width%' "$file")
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+="-map -$teletext"
  scale="-vf \"scale=-4:'min(720,ih)'\""
  (( width * 100 / height > 177 )) && scale="-vf \"scale='min(1280,iw)':-4\""
  scale+=" -sws_flags bilinear"
  RUN2 "ffmpeg -fflags +igndts -stats -nostdin -hide_banner -y \
                           -i \"$file\" -map 0:v -map 0:a? -map 0:s? \
                           $scale \
                           $opts \
                           -c:v libx264 -crf ${quality} -preset $x264_preset -r 25 \
                           -c:a $basic_audio_codec -ac 2 -b:a 160k \
                           -c:s copy \
                           \"$out\""
}

enc_tv() { # max 1280x720p, max 25fps, veryfast, copy audio
  local file="$1" opts out="$2" scale
  local width=$(mediainfo --Inform='Video;%Width%' "$file")
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+="-map -$teletext"
  scale="-vf \"scale=-4:'min(720,ih)'\""
  (( width * 100 / height > 177 )) && scale="-vf \"scale='min(1280,iw)':-4\""
  scale+=" -sws_flags bilinear"
  RUN2 "ffmpeg -fflags +igndts -stats -nostdin -hide_banner -y \
                           -i \"$file\" -map 0:v -map 0:a? -map 0:s? \
                           $scale \
                           $opts \
                           -c:v libx264 -crf ${quality} -preset veryfast -r 25 \
                           -c:a copy \
                           -c:s copy \
                           \"$out\""
}

enc_hd2() {
  enc_tv "$@"
}

enc_qhd() { # max 960x540p, max 25fps, stereo
  local file="$1" opts out="$2" scale
  local width=$(mediainfo --Inform='Video;%Width%' "$file")
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=22
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+="-map -$teletext"
  scale="-vf \"scale=-4:'min(540,ih)'\""
  (( width * 100 / height > 177 )) && scale="-vf \"scale='min(960,iw)':-4\""
  scale+=" -sws_flags bilinear"
  RUN2 "ffmpeg -fflags +igndts -stats -nostdin -hide_banner -y \
                           -i \"$file\" -map 0:v -map 0:a? -map 0:s? \
                           $scale \
                           $opts \
                           -c:v libx264 -crf ${quality} -preset veryfast -r 25 \
                           -c:a $basic_audio_codec -ac 2 -b:a 160k \
                           -c:s copy \
                           \"$out\""
}

enc_x265_hd2() { # max 1280x720p, max 25fps, stereo
  local file="$1" opts out="$2" scale
  local width=$(mediainfo --Inform='Video;%Width%' "$file")
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+="-map -$teletext"
  scale="-vf \"scale=-4:'min(720,ih)'\""
  (( width * 100 / height > 177 )) && scale="-vf \"scale='min(1280,iw)':-4\""
  scale+=" -sws_flags bilinear"
  RUN2 "ffmpeg -fflags +igndts -stats -nostdin -hide_banner -y \
                           -i \"$file\" -map 0:v -map 0:a? -map 0:s? \
                           $scale \
                           $opts \
                           -c:v libx265 -crf ${quality} -preset $x265_preset -r 25 \
                           -c:a $basic_audio_codec -ac 2 -b:a 160k \
                           -c:s copy \
                           \"$out\""
}

enc_x265_fhd2() { # max 1920x1080p, max 25fps, stereo
  local file="$1" opts out="$2" scale
  local width=$(mediainfo --Inform='Video;%Width%' "$file")
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+="-map -$teletext"
  scale="-vf \"scale=-4:'min(1080,ih)'\""
  (( width * 100 / height > 177 )) && scale="-vf \"scale='min(1920,iw)':-4\""
  scale+=" -sws_flags bilinear"
  RUN2 "ffmpeg -fflags +igndts -stats -nostdin -hide_banner -y \
                           -i \"$file\" -map 0:v -map 0:a? -map 0:s? \
                           $scale \
                           $opts \
                           -c:v libx265 -crf ${quality} -preset $x265_preset -r 25 \
                           -c:a $basic_audio_codec -ac 2 -b:a 160k \
                           -c:s copy \
                           \"$out\""
}

enc_x265_qhd() { # max 960x540p, max 25fps, stereo
  local file="$1" opts out="$2" scale
  local width=$(mediainfo --Inform='Video;%Width%' "$file")
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=22
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+="-map -$teletext"
  scale="-vf \"scale=-4:'min(540,ih)'\""
  (( width * 100 / height > 177 )) && scale="-vf \"scale='min(960,iw)':-4\""
  scale+=" -sws_flags bilinear"
  RUN2 "ffmpeg -fflags +igndts -stats -nostdin -hide_banner -y \
                           -i \"$file\" -map 0:v -map 0:a? -map 0:s? \
                           $scale \
                           $opts \
                           -c:v libx265 -crf ${quality} -preset $x265_preset -r 25 \
                           -c:a $basic_audio_codec -ac 2 -b:a 160k \
                           -c:s copy \
                           \"$out\""
}

enc_x265_1920x1080() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=26
  [[ $height -le 720 ]] && quality=24
  [[ $height -le 486 ]] && quality=22
  [[ $height -le 360 ]] && quality=21
  opts='--keep-display-aspect'
  RUN HandBrakeCLI -f av_mkv \
                          -e x265 -q ${quality}.0 $opts -m --x265-preset $x265_preset --previews 1 -X 1920 -Y 1080 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy -B 384 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_x265_1280x720() {
  local file="$1" opts out="$2"
  opts='--keep-display-aspect'
  local quality=23
  [[ $height -le 486 ]] && quality=22
  [[ $height -le 360 ]] && quality=21
  RUN HandBrakeCLI -f av_mkv \
                          -e x265 -q ${quality}.0 $opts -m --x265-preset $x265_preset --previews 1 -X 1280 -Y 720 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy -B 384 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_x265_1280x720() { # max 1280x720p
  local file="$1" opts out="$2" scale
  local width=$(mediainfo --Inform='Video;%Width%' "$file")
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+="-map -$teletext"
  scale="-vf \"scale=-4:'min(720,ih)'\""
  (( width * 100 / height > 177 )) && scale="-vf \"scale='min(1280,iw)':-4\""
  scale+=" -sws_flags bilinear"
  RUN2 "ffmpeg -fflags +igndts -stats -nostdin -hide_banner -y \
                           -i \"$file\" -map 0:v -map 0:a? -map 0:s? \
                           $scale \
                           $opts \
                           -c:v libx265 -crf ${quality} -preset $x265_preset \
                           -c:a copy \
                           -c:s copy \
                           \"$out\""
}

enc_x265_hd() {
  enc_x265_1280x720 "$@"
}

enc_hd() {
  enc_x265_hd "$@"
}

process() {
  local file="$1" opts
  opts='--keep-display-aspect'
  local in_progress="$(filename "$file")_${codec}_in_progress.mkv"
  [[ -e "$in_progress" ]] && {
    LogDebug "file $file is being currently processed by someone else"
    return 2
  }
  touch "$in_progress"
  eval "enc_$codec \"$file\" \"$in_progress\""
  local res=$?
  Log "EC=$res"
  [[ $res -ne 0 ]] && {
    if [[ $res -lt 10 || $res -eq 139 ]]; then
      mv -f "$file" "$(filename "$file")_broken.$(fileext "$file")"
    else
      touch /tmp/autoenc.break
    fi
    rm -f "$in_progress"
    return 1
  }
  #local old="$(filename "$file")_done.$(fileext "$file")"
  local old="$file"
  local new="$(filename "$file")_${codec}_done.mkv"
  local to_be_deleted
  mv -f "$in_progress" "$new"
  #mv -f "$file" "$old"
  local size_old size_new
  size_old=$(stat -c %s "$old")
  size_new=$(stat -c %s "$new")
  [[ "$(echo "scale=2; ${size_new}/$size_old < .8" | bc)" == "1" ]] && {
    to_be_deleted="$old"
#    mv "$old" "/mnt/net/to_be_deleted/$(filename `$(basename "$old"`")_to_be_deleted.$(fileext "$old")"
  } || {
    to_be_deleted="$new"
#    mv "$new" "/mnt/net/to_be_deleted/$(filename `$(basename "$new"`")_to_be_deleted.$(fileext "$new")"
  }
  #mv "$to_be_deleted" "$(filename "$to_be_deleted")_to_be_deleted.$(fileext "$to_be_deleted")"
}

set_codec() {
  codec=x265
  [[ "$1" =~ /to_process/([^/]*)/ ]] && {
    LogDebug "parsed potential codec ${BASH_REMATCH[1]} from $1"
    LogDebug "testing processor `declare -F enc_${BASH_REMATCH[1]}`"
    declare -F enc_${BASH_REMATCH[1]} >& /dev/null && {
      codec=${BASH_REMATCH[1]}
    }
  }
  LogDebug "using codec $codec"
}

find_movie() {
  local file fname in_progress
  for path in "$@"; do
    ionice -c 3 find -L "$path" ! -name '.*' | sort
  done | grep -iE '\.(avi|mkv|mpg|mpeg|mp4|iso|ts|m4v|flv|webm)$' | grep -v -e '_in_progress\.' -e '_broken\.' -e '_done\.' -e '_to_be_deleted\.' -e '\.part$' | \
  while read -r file; do
    LogDebug "file $file"
    set_codec "$file"
    fname="$(filename "$file")"
    file_target="$(readlink -e "$file")"
    in_progress="${fname}_${codec}_in_progress.mkv"
    [[ -e "${fname}_${codec}_done.mkv" ]] && {
      LogDebug "file $file is already encoded using $codec"
      continue
    }
    [[ -f "$file_target" ]] || {
      LogDebug "$file is not a regular file"
      continue
    }
    if [[ $(( $(date +%s) - $(stat -c %Z "$file_target") )) -le 120 ]]; then
      LogDebug "file $file is being currently being written"
      continue
    fi
    [[ -e "$in_progress" ]] && {
      if [[ $(( $(date +%s) - $(stat -c %Z "$in_progress") )) -le 3600 ]]; then
        LogDebug "file $file is being currently processed by someone else"
        continue
      else
        rm -f "$in_progress"
      fi
    }
    LogDebug "check $file for a video content"
    ffprobe_parse "$file"
    #mediainfo "$file" | grep -q Video && echo "$file"
    [[ "${ffp[codec_type]}" == "video" ]] && echo "$file"
  done | head -n 1
}

TimeToSeconds() {
  echo $(( 10#$1*3600+10#$2*60+10#$3 ))
}

main() {
  rm -f /tmp/autoenc.break
  movie=$(find_movie "$@")
  [[ -z "$movie" ]] && exit
  set_codec "$movie"
  Log "process $movie using codec $codec"
  sleep $(( RANDOM * 20 / 32767 ))
  duration=10
  start=$(date +%s)
  _done=( 0 0 )
  elapsed=( 0 0 )
  weight=(  950 903 815 663 440 194 38 1 )
  weight=(  900 810 656 430 185  34  1   )
  weight=( 1000 750 400 200 100  50 10   )
  weight=(  950 903 815 663 440 194 38 1 )
  #duration2=$(HandBrakeCLI --scan -i "$movie" 2>&1 | grep duration | grep -oE -m1 '[0-9]{2}:[0-9]{2}:[0-9]{2}' | grep -o '[0-9]*')
  ffprobe_parse "$movie"
  duration=$(echo "${ffp[duration]}" | grep -oE '[0-9]+' | head -n 1)
  for tag_language in "" "${ffp[TAG:language]}"; do
  [[ -z "$duration" ]] && {
    [[ -n "${tag_language}" ]] && tag_language="-${tag_language}"
    duration=$(echo "${ffp[TAG:DURATION${tag_language}]}" | grep -oE -m1 '[0-9]{2}:[0-9]{2}:[0-9]{2}' | grep -o '[0-9]*')
    [[ -n "$duration" ]] && {
      LogDebug "raw duration is '${ffp[TAG:DURATION{tag_language}]}' '$duration'"
      duration=$(TimeToSeconds $duration)
    }
  }
  done
  Log "found duration $duration seconds" 'INFO'
  while read -r line; do
    if [[ "$line" =~ ([0-9]+)\.[0-9]{2}\ % ]] || [[ "$line" =~ time=([0-9]{2}):([0-9]{2}):([0-9]{2}) ]]; then

      if [[ $duration -eq 0 ]]; then

        # handle stream without overall length info
        if [[ -z "${BASH_REMATCH[3]}" ]]; then
          _done=${BASH_REMATCH[1]}
        else
          _done=$(( $(TimeToSeconds ${BASH_REMATCH[*]:1})/60 ))
        fi
        if [[ "${_done}" -gt "${_done[1]}" ]]; then
          _done[1]=${_done}
          Log "$line" PROGRESS
        fi

      else

        # get the current percent done
        if [[ -z "${BASH_REMATCH[3]}" ]]; then
          _done=${BASH_REMATCH[1]}
        else
          _done=$(( $(TimeToSeconds ${BASH_REMATCH[*]:1})*100/$duration ))
        fi
        # current time spent
        elapsed=$(( $(date +%s) - start ))
        # reset counter if the precentage decreases
        [[ ${_done} -lt ${_done[1]} ]] && {
          _done=( $_done 0 )
          elapsed=( $elapsed 0 )
        }
        if [[ "${_done}" -gt "${_done[1]}" ]]; then
          _done=( ${_done} "${_done[@]}" )
          elapsed=( $elapsed "${elapsed[@]}" )
          remaining=0
          up=0
          down=0
          for (( i=1; i<${#_done[@]}-1; i++ )); do
            [[ $i -gt ${#weight[@]} ]] && break
            up=$(( up + weight[i-1] * ( elapsed[i] - elapsed[i+1] ) / ( _done[i] - _done[i+1] ) ))
            down=$(( down + weight[i-1] ))
          done
          [[ ${_done} -eq 0 ]] && {
            remaining=0
          } || {
            remaining=$(( up / down * ( 100 - _done ) ))
          }
          eta=$(( $start + $elapsed + $remaining ))
          #printf -v p "%3d%%, elapsed %2dd,%02d:%02d:%02d, rem %2dd,%02d:%02d:%02d, ETA %(%F %T)T, %3d %3d spp" ${_done} $(($elapsed/(3600*24))) $(($elapsed%(3600*24)/3600)) $(($elapsed%3600/60)) $(($elapsed%60)) $(($remaining/(3600*24))) $(($remaining%(3600*24)/3600)) $(($remaining%3600/60)) $(($remaining%60)) $eta $(( up / down )) $(( ( elapsed[1] - elapsed[1+1] ) / ( _done[1] - _done[1+1] ) ))
          printf -v p "%3d%%, elapsed %2dd,%02d:%02d:%02d, rem %2dd,%02d:%02d:%02d, ETA %(%F %T)T, %4d" ${_done} $(($elapsed/(3600*24))) $(($elapsed%(3600*24)/3600)) $(($elapsed%3600/60)) $(($elapsed%60)) $(($remaining/(3600*24))) $(($remaining%(3600*24)/3600)) $(($remaining%3600/60)) $(($remaining%60)) $eta $(( up / down ))

          Log "$p; $line" PROGRESS
        else
          LogDebug "$p; $line" PROGRESS
        fi

      fi

      # stop if processed files is removed
      [[ -e /tmp/autoenc.break ]] || {
        #[[ -e "$movie" ]] || {
        bname="$(basename "$movie")"
        res=''
        while read -r file_line; do
          [[ "$file_line" == "$bname" ]] && res=1
        done < <(ls -1 "$(dirname "$movie")")
        [[ -z "$res" ]] && {
          Log "file $movie got removed, stopping the processing"
          _pid=$(pstree -palA $$ | grep -oEm1 'ffmpeg,[0-9]+' | grep -oE '[0-9]+')
          [[ -z "${_pid}" ]] && {
            LogDebug "ffmpeg PID not found, trying HandBrakeCLI"
            _pid=$(pstree -palA $$ | grep -oE 'HandBrakeCLI,[0-9]+' | grep -o '[0-9]+' )
          }
          LogDebug "found PID '${_pid}'"
          [[ -n "${_pid}" ]] && {
            Log "killing process with PID ${_pid}"
            kill ${_pid}
            touch /tmp/autoenc.break
          }
        }
      }
    else
      Log "$line" out
    fi
  done < <(process "$movie" | tr '\r' '\n' )
  [[ -e /tmp/autoenc.break ]] && {
    rm -f /tmp/autoenc.break
    exit 1
  }
}

main "$@"
exec $0 "$@"
