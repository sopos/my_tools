#!/bin/bash
Log(){
  local prio="${2:-  LOG  }"
  printf ":: [ %(%T)T ] :: [ %s ] :: " -1 "$prio" >&2
  echo -e "$1" >&2
}

LogDebug(){
  [[ -n "$DEBUG" ]] && Log "$1" " DEBUG "
}

( which HandBrakeCLI && which ffmpeg && which ps && which pidof && which mediainfo && which bc && which nice && which find && which grep ) > /dev/null 2>&1 || {
  Log "following tools need to be installed: HandBrakeCLI. ffmpeg, ps, pidof, mediainfo, bc, nice, find, and grep" >&2
  exit
}

# lock
lock_file=/tmp/autoenc.lock
# check a lock
[[ -e $lock_file ]] && {
  grep -q autoenc /proc/$(cat $lock_file)/comm >& /dev/null && {
    LogDebug "autoenc is still doing its job"
    exit
  }
}
# temporary lock solution
for ((i=0; i<10; i++)); do
  pidof HandBrakeCLI >& /dev/null || pidof ffmpeg >& /dev/null || pidof find >& /dev/null || pidof mediainfo >& /dev/null && {
    LogDebug "HandBrakeCLI is still running, exiting"
    exit
  }
  sleep 0.25
done
# create a lock
echo "$$" > $lock_file

Run() {
  LogDebug "running '$1'"
  eval "$1"
}

RUN() {
  local param params blacklist="[[:space:]]|>|<|\|\"'"
  for param in "$@"; do
    if [[ "$param" =~ $blacklist ]]; then
      param="${param//\\/\\\\}"
      params="$params \"${param//\"/\\\"}\""
    else
      params="$params $param"
    fi
  done
  params="${params:1}"
  Log "EXECUTING >>>>> ${params} <<<<<"
  eval "$params"
  local res=$?
  LogDebug "FINISHED WITH RESULT $res"
  return $res
}
RUN2() {
  Log "EXECUTING >>>>> ${1} <<<<<"
  eval "$1"
  local res=$?
  LogDebug "FINISHED WITH RESULT $res"
  return $res
}

filename() {
  echo "$1" | sed -r "s/(.*)\.([^.]*)$/\1/"
}

fileext() {
  echo "$1" | sed -r "s/(.*)\.([^.]*)$/\2/"
}

basic_audio_codec=aac
x265_preset=veryslow
x264_preset=veryslow

enc_eee() {
  local file="$1" opts out="$2"
  opts='--keep-display-aspect'
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e mpeg4 -q 15.0 $opts -m --previews 1 -X 1024 -Y 576 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E $basic_audio_codec -B 160 --audio-fallback ac3 -6 stereo \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_eee() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=25
  opts='--keep-display-aspect'
  RUN2 "nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 -X 832 -Y 468 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E $basic_audio_codec -B 160 --mixdown stereo --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i '$file' \
                          -o '$out'"
}

enc_eee2() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=23
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+="-map -$teletext"
  duration=$(TimeToSeconds $(HandBrakeCLI --scan -i "$file" 2>&1 | grep duration | grep -oE -m1 '[0-9]{2}:[0-9]{2}:[0-9]{2}'))
  RUN2 "nice -n 15 ffmpeg -stats -nostdin -hide_banner -y \
                           -i '$file' -map 0:v -map 0:a -map 0:s? -vf \"scale=-4:'min(468,ih)'\" -sws_flags bilinear \
                           $opts \
                           -c:v libx264 -crf ${quality} -preset $x264_preset \
                           -c:a copy \
                           -c:s copy \
                           '$out'"
}

enc_x264_864x486() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=21
  [[ $height -le 360 ]] && quality=20
  opts='--keep-display-aspect'
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 -X 864 -Y 486 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E $basic_audio_codec -B 192 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_x264_832x468() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=21
  [[ $height -le 360 ]] && quality=20
  opts='--keep-display-aspect'
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 -X 832 -Y 468 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E $basic_audio_codec -B 192 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_x264() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=25
  [[ $height -le 720 ]] && quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts='--keep-display-aspect'
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 -X 1920 -Y 1080 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy -B 384 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_x264_1280x720() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts='--keep-display-aspect'
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 -X 1280 -Y 720 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy -B 384 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_x264_hd() {
  enc_x264_1280x720 "$@"
}

enc_htpc() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts='--keep-display-aspect'
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset ultrafast --h264-profile main --previews 1 -X 1280 -Y 720 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E $basic_audio_codec -B 192 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_htpc_rpi() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts='--keep-display-aspect'
  nice -n 15 ffmpeg -stats -hide_banner -y \
                           -i "$file" -map 0:v -map 0:a -map 0:s? -vf "scale=-4:'min(720,ih)'" -sws_flags bilinear \
                           -c:v h264_omx -b:v 1500k -maxrate:v 2000k \
                           -c:a $basic_audio_codec -b:a 192k \
                           "$out"
}

enc_htpc_2() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local fps=`echo "scale=20;$(mediainfo --Inform='Video;%FrameRate%' "$file") / 2" | bc | sed -r 's/0+$//;s/\.$//'`
  local quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts="--keep-display-aspect --rate $fps"
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 -X 1280 -Y 720 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E $basic_audio_codec -B 192 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_VHS() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=25
  [[ $height -le 720 ]] && quality=23
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts="--keep-display-aspect --decomb=\"mode=17\" --cfr -r 50 --crop 12:12:24:24 -l $(( ($height-2*12)/2 )) --display-width $(( ($height-2*12)/2*4/3 ))"
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy --audio-fallback $basic_audio_codec  -B 192\
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_x264_VHS() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=25
  [[ $height -le 720 ]] && quality=22
  [[ $height -le 486 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts="--keep-display-aspect --decomb=\"mode=17\" --cfr -r 50 --crop 12:12:24:24 --display-width $(( ($height-2*12)*4/3 ))"
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x264 -q ${quality}.0 $opts -m --x264-preset $x264_preset --h264-profile main --previews 1 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy --audio-fallback $basic_audio_codec  -B 192\
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_VHS() {
  enc_x264_VHS "$@"
}

enc_x265_VHS() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=26
  [[ $height -le 1080 ]] && quality=25
  [[ $height -le 720 ]] && quality=24
  [[ $height -le 486 ]] && quality=22
  [[ $height -le 360 ]] && quality=21
  opts="--keep-display-aspect --decomb=\"mode=17\" --cfr -r 50 --crop 12:12:24:24 --display-width $(( ($height-2*12)*4/3 ))"
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x265 -q ${quality}.0 $opts -m --x265-preset $x265_preset --previews 1 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy --audio-fallback $basic_audio_codec  -B 192\
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_minidv() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=26
  [[ $height -le 1080 ]] && quality=25
  [[ $height -le 720 ]] && quality=22
  [[ $height -le 480 ]] && quality=21
  [[ $height -le 360 ]] && quality=20
  opts='--keep-display-aspect --decomb="mode=17" --cfr -r 50 --display-width $(( $height*4/3 ))'
#                          -a 1 -E $basic_audio_codec -B 192 \
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x265 -q ${quality}.0 $opts -m --x265-preset $x265_preset --previews 1\
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy -B 192 --audio-fallback $basic_audio_codec \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}


enc_x265() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=26
  [[ $height -le 1080 ]] && quality=25
  [[ $height -le 720 ]] && quality=24
  [[ $height -le 486 ]] && quality=22
  [[ $height -le 360 ]] && quality=21
  opts='--keep-display-aspect'
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x265 -q ${quality}.0 $opts -m --x265-preset $x265_preset --previews 1 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy -B 384 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_x265() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=26
  [[ $height -le 1080 ]] && quality=25
  [[ $height -le 720 ]] && quality=24
  [[ $height -le 486 ]] && quality=22
  [[ $height -le 360 ]] && quality=21
  local teletext=$( ffmpeg -hide_banner -i "$file" 2>&1 | grep Stream | grep teletext | grep -oE '#[0-9]:[0-9]+' | grep -oE '[0-9:]*' )
  [[ -n "$teletext" ]] && opts+="-map -$teletext"
  duration=$(TimeToSeconds $(HandBrakeCLI --scan -i "$file" 2>&1 | grep duration | grep -oE -m1 '[0-9]{2}:[0-9]{2}:[0-9]{2}'))
  RUN2 "nice -n 15 ffmpeg -stats -nostdin -hide_banner -y \
                           -i '$file' -map 0:v -map 0:a -map 0:s? \
                           $opts \
                           -c:v libx265 -crf ${quality} -preset $x265_preset \
                           -c:a copy \
                           -c:s copy \
                           '$out'"
}

enc_x265_1920x1080() {
  local file="$1" opts out="$2"
  local height=$(mediainfo --Inform='Video;%Height%' "$file")
  local quality=26
  [[ $height -le 720 ]] && quality=24
  [[ $height -le 486 ]] && quality=22
  [[ $height -le 360 ]] && quality=21
  opts='--keep-display-aspect'
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x265 -q ${quality}.0 $opts -m --x265-preset $x265_preset --previews 1 -X 1920 -Y 1080 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy -B 384 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

enc_x265_1280x720() {
  local file="$1" opts out="$2"
  opts='--keep-display-aspect'
  local quality=23
  [[ $height -le 486 ]] && quality=22
  [[ $height -le 360 ]] && quality=21
  RUN nice -n 15 HandBrakeCLI -f av_mkv \
                          -e x265 -q ${quality}.0 $opts -m --x265-preset $x265_preset --previews 1 -X 1280 -Y 720 \
                          -a 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 -E copy -B 384 --audio-fallback ac3 \
                          -s 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 \
                          -i "$file" \
                          -o "$out"
}

process() {
  local file="$1" opts
  opts='--keep-display-aspect'
  local in_progress="$(filename "$file")_${codec}_in_progress.mkv"
  [[ -e "$in_progress" ]] && {
    LogDebug "file $file is being currently processed by someone else"
    return 2
  }
  touch "$in_progress"
  eval "enc_$codec \"$file\" \"$in_progress\""
  local res=$?
  Log "EC=$res"
  [[ $res -ne 0 ]] && {
    [[ $res -lt 10 ]] && {
      mv -f "$file" "$(filename "$file")_broken.$(fileext "$file")"
      rm -f "$in_progress"
    }
    return 1
  }
  #local old="$(filename "$file")_done.$(fileext "$file")"
  local old="$file"
  local new="$(filename "$file")_${codec}_done.mkv"
  local to_be_deleted
  mv -f "$in_progress" "$new"
  #mv -f "$file" "$old"
  local size_old size_new
  size_old=$(stat -c %s "$old")
  size_new=$(stat -c %s "$new")
  [[ "$(echo "scale=2; ${size_new}/$size_old < .8" | bc)" == "1" ]] && {
    to_be_deleted="$old"
#    mv "$old" "/mnt/net/to_be_deleted/$(filename `$(basename "$old"`")_to_be_deleted.$(fileext "$old")"
  } || {
    to_be_deleted="$new"
#    mv "$new" "/mnt/net/to_be_deleted/$(filename `$(basename "$new"`")_to_be_deleted.$(fileext "$new")"
  }
  #mv "$to_be_deleted" "$(filename "$to_be_deleted")_to_be_deleted.$(fileext "$to_be_deleted")"
}

set_codec() {
  codec=x264
  [[ "$1" =~ /to_process/([^/]*)/ ]] && {
    declare -F enc_${BASH_REMATCH[1]} >& /dev/null && {
      codec=${BASH_REMATCH[1]}
    }
  }
  LogDebug "using codec $codec"
}

find_movie() {
  local file fname in_progress
  (
#    find /mnt/net/\!downloads/ -type f
#    find /mnt/net/archiv/ -type f -mtime +0
#    find /mnt/net/CD/ -type f -mtime +0
#    find /mnt/net/\!probrat/ -type f -mtime +0
#    find /mnt/net/to_process -type f
    find -L "$HOME/Videos/to_process/"
  ) | grep -iE '\.(avi|mkv|mpg|mpeg|mp4|iso|ts|m4v|flv|webm)$' | grep -v -e '_in_progress\.' -e '_broken\.' -e '_done\.' -e '_to_be_deleted\.' -e '\.part$' | sort | \
  while read -r file; do
    LogDebug "file $file"
    set_codec "$file"
    fname="$(filename "$file")"
    file_target="$(readlink -e "$file")"
    in_progress="${fname}_${codec}_in_progress.mkv"
    [[ -e "${fname}_${codec}_done.mkv" ]] && {
      LogDebug "file $file is already encoded using $codec"
      continue
    }
    [[ -f "$file_target" ]] || {
      LogDebug "$file is not a regular file"
      continue
    }
    if [[ $(( $(date +%s) - $(stat -c %Z "$file_target") )) -le 120 ]]; then
      LogDebug "file $file is being currently being written"
      continue
    fi
    [[ -e "$in_progress" ]] && {
      if [[ $(( $(date +%s) - $(stat -c %Z "$in_progress") )) -le 900 ]]; then
        LogDebug "file $file is being currently processed by someone else"
        continue
      else
        rm -f "$in_progress"
      fi
    }
    mediainfo "$file" | grep -q Video && echo "$file"
  done | head -n 1
}

movie=$(find_movie)
[[ -z "$movie" ]] && exit
set_codec "$movie"
Log "process $movie using codec $codec"
sleep $((RANDOM*20/32767))
#(process "$movie" | while read -d % line; do [[ "$line" =~ (.)\.00$ ]] && a=${BASH_REMATCH[1]}; [[ "$a" != "$b" ]] && Log "$line"; b="$a"; done) 2>&1
duration=10
TimeToSeconds() {
  echo $(( 10#$1*3600+10#$2*60+10#$3 ))
}
start=$(date +%s)
process "$movie" 2>&1 | tr '\r' '\n' | while read -r line; do
  [[ $duration -eq 10 && "$line" =~ Duration:\ ([0-9]{2}):([0-9]{2}):([0-9]{2}) ]] && {
    duration=$(TimeToSeconds ${BASH_REMATCH[*]:1})
    Log "found duration $duration seconds" ' INFO  '
    [[ $duration -gt 10800 ]] && {
      Log "duration $duration seconds seems to be a nonsense, trying HandBrakeCLI --scan -i '$movie'" ' ERROR '
      duration2=$(HandBrakeCLI --scan -i "$movie" 2>&1 | grep duration | grep -oE -m1 '[0-9]{2}:[0-9]{2}:[0-9]{2}' | grep -o '[0-9]*')
      LogDebug "raw duration is $duration2"
      duration2=$(TimeToSeconds $duration2)
      Log "found duration $duration2 seconds" ' INFO  '
      [[ "$duration2" =~ ^[0-9]*$ ]] && duration=$duration2
    }
  }
  if [[ "$line" =~ ([0-9]+)\.[0-9]{2}\ % ]] || [[ "$line" =~ time=([0-9]{2}):([0-9]{2}):([0-9]{2}) ]]; then
    if [[ -z "${BASH_REMATCH[3]}" ]]; then
      _done=${BASH_REMATCH[1]}
    else
      _done=$(( $(TimeToSeconds ${BASH_REMATCH[*]:1})*100/$duration ))
    fi
    elapsed=$(( $(date +%s) - start ))
    [[ ${_done} -eq 0 ]] && {
      eta=0
    } || {
      eta=$(( 100 * $elapsed * (100-${_done}) / ${_done} / 100 ))
    }
    printf -v p "%3d%%, elapsed %2dd,%02d:%02d:%02d, ETA %2dd,%02d:%02d:%02d" ${_done} $(($elapsed/(3600*24))) $(($elapsed%(3600*24)/3600)) $(($elapsed%3600/60)) $(($elapsed%60)) $(($eta/(3600*24))) $(($eta%(3600*24)/3600)) $(($eta%3600/60)) $(($eta%60))
    [[ "${_done}" != "$b" ]] && {
      Log "$p, $line"
      b="${_done}"
    } || {
      LogDebug "$p, $line"
    }
  else
    Log "$line"
  fi
done
